Preguntas
¬øC√≥mo se inicia un repositorio Git local?
git init
Este comando transforma el directorio actual en un repositorio Git vac√≠o, permiti√©ndote comenzar a registrar cambios localmente.

¬øC√≥mo dejo de seguir un directorio con Git?
rm -rf .git
Este comando borra la carpeta .git, que es donde Git guarda toda la informaci√≥n del repositorio. Esto "desvincula" el proyecto de Git, pero los archivos permanecen en el sistema.

Si creo un archivo dentro de un directorio ya versionado por Git, ¬øse empieza a rastrear autom√°ticamente?
No. Git lo reconoce como un archivo nuevo, pero no lo incluye en el control de versiones hasta que se ejecute git add.

¬øQu√© comando se utiliza para incluir un archivo en el √°rea de preparaci√≥n (staging)?
git add <archivo>
Esto indica a Git que deseas incluir ese archivo en el pr√≥ximo commit.

¬øC√≥mo puedo saber qu√© archivos han sido modificados?
git status
Este comando muestra qu√© archivos han cambiado, cu√°les est√°n en staging, cu√°les no y qu√© archivos no est√°n siendo seguidos.

¬øQu√© comando se usa para guardar cambios en el repositorio local?
git commit -m "mensaje"
Este comando guarda los archivos que est√°n en staging como un nuevo "punto de guardado" en el historial del proyecto.

¬øQu√© significa hacer un commit?
Un commit es como tomar una fotograf√≠a del proyecto en ese momento. Guarda el estado de los archivos que est√°n siendo seguidos y permite regresar a ese punto m√°s adelante si es necesario.

Pr√°ctica
3. Resultado del git status antes de cualquier acci√≥n:
On branch main  
Your branch is up to date with 'origin/main'.  

Untracked files:  
  (use "git add <file>..." to include in what will be committed)  
        sandwich.txt  

nothing added to commit but untracked files present (use "git add" to track)
üîç Explicaci√≥n: Git detecta el archivo sandwich.txt, pero no lo est√° siguiendo a√∫n porque no se ha a√±adido al staging con git add.

7. Resultado luego de crear el archivo pero antes del commit:
Igual que el punto 3. Todav√≠a no se agreg√≥ con git add.

9. ¬øQu√© muestra git log?
Muestra un registro detallado de los commits realizados, incluyendo autor, fecha y mensaje. Es como una bit√°cora de todos los cambios importantes.

10. Variaciones del comando git log:

10.1. git log --oneline
Muestra los commits de forma compacta, cada uno en una sola l√≠nea. Muy √∫til para tener una vista general r√°pida del historial.

10.2. git log --stat
Proporciona detalles sobre qu√© archivos fueron modificados y cu√°ntas l√≠neas se agregaron o eliminaron en cada commit.

11. Comandos para comparar cambios:

11.1. git diff
Compara los archivos modificados con su √∫ltima versi√≥n guardada. Muestra exactamente qu√© l√≠neas han cambiado antes de hacer un commit.

11.2. git difftool --tool=meld
Abre una herramienta visual que permite ver f√°cilmente las diferencias entre versiones. Es √∫til para detectar conflictos o cambios complejos.

16. Ejemplo de salida de git log --stat:
commit ...  
 sandwich2_feo.txt | 3 ---  
 1 file changed, 3 deletions(-)

üìå Explicaci√≥n: Indica que el archivo sandwich2_feo.txt fue modificado, espec√≠ficamente con 3 l√≠neas eliminadas. log --stat resume los cambios por archivo.
 sandwich2_feo.txt | 3 ---
 1 file changed, 3 deletions(-)
Explicaci√≥n: Muestra qu√© archivos cambiaron y cu√°ntas l√≠neas se eliminaron o agregaron.

